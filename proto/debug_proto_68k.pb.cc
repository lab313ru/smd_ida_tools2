// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_68k.proto

#include "debug_proto_68k.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace idadebug {

inline constexpr VdpRegs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : v00_{0u},
        v01_{0u},
        v02_{0u},
        v03_{0u},
        v04_{0u},
        v05_{0u},
        v06_{0u},
        v07_{0u},
        v08_{0u},
        v09_{0u},
        v0a_{0u},
        v0b_{0u},
        v0c_{0u},
        v0d_{0u},
        v0e_{0u},
        v0f_{0u},
        v10_{0u},
        v11_{0u},
        v12_{0u},
        v13_{0u},
        v14_{0u},
        v15_{0u},
        v16_{0u},
        v17_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VdpRegs::VdpRegs(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VdpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegsDefaultTypeInternal() {}
  union {
    VdpRegs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegsDefaultTypeInternal _VdpRegs_default_instance_;

inline constexpr VdpRegValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : index_{static_cast< ::idadebug::VdpRegsEnum >(0)},
        value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VdpRegValue::VdpRegValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VdpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegValueDefaultTypeInternal() {}
  union {
    VdpRegValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegValueDefaultTypeInternal _VdpRegValue_default_instance_;

inline constexpr VdpReg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reg_{static_cast< ::idadebug::VdpRegsEnum >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VdpReg::VdpReg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VdpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegDefaultTypeInternal() {}
  union {
    VdpReg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegDefaultTypeInternal _VdpReg_default_instance_;

inline constexpr MemoryAS::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : address_{0u},
        size_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryAS::MemoryAS(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MemoryASDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryASDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryASDefaultTypeInternal() {}
  union {
    MemoryAS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryASDefaultTypeInternal _MemoryAS_default_instance_;

inline constexpr MemoryAD::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryAD::MemoryAD(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MemoryADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryADDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryADDefaultTypeInternal() {}
  union {
    MemoryAD _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryADDefaultTypeInternal _MemoryAD_default_instance_;

inline constexpr MemData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemData::MemData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemDataDefaultTypeInternal() {}
  union {
    MemData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemDataDefaultTypeInternal _MemData_default_instance_;

inline constexpr GpRegs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : d0_{0u},
        d1_{0u},
        d2_{0u},
        d3_{0u},
        d4_{0u},
        d5_{0u},
        d6_{0u},
        d7_{0u},
        a0_{0u},
        a1_{0u},
        a2_{0u},
        a3_{0u},
        a4_{0u},
        a5_{0u},
        a6_{0u},
        a7_{0u},
        pc_{0u},
        sp_{0u},
        sr_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpRegs::GpRegs(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegsDefaultTypeInternal() {}
  union {
    GpRegs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegsDefaultTypeInternal _GpRegs_default_instance_;

inline constexpr GpRegValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : index_{static_cast< ::idadebug::GpRegsEnum >(0)},
        value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpRegValue::GpRegValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegValueDefaultTypeInternal() {}
  union {
    GpRegValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;

inline constexpr GpReg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reg_{static_cast< ::idadebug::GpRegsEnum >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpReg::GpReg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegDefaultTypeInternal() {}
  union {
    GpReg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegDefaultTypeInternal _GpReg_default_instance_;

inline constexpr DmaInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : len_{0u},
        src_{0u},
        dst_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DmaInfo::DmaInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DmaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmaInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmaInfoDefaultTypeInternal() {}
  union {
    DmaInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmaInfoDefaultTypeInternal _DmaInfo_default_instance_;

inline constexpr DbgBreakpoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : condition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::idadebug::BpType >(0)},
        bstart_{0u},
        bend_{0u},
        enabled_{false},
        is_vdp_{false},
        elang_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DbgBreakpoint::DbgBreakpoint(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DbgBreakpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointDefaultTypeInternal() {}
  union {
    DbgBreakpoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;

inline constexpr Condition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : condition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        elang_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Condition::Condition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionDefaultTypeInternal _Condition_default_instance_;

inline constexpr Callstack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : callstack_{},
        _callstack_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Callstack::Callstack(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CallstackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallstackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallstackDefaultTypeInternal _Callstack_default_instance_;

inline constexpr AnyRegValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AnyRegValue::AnyRegValue(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnyRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyRegValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyRegValueDefaultTypeInternal() {}
  union {
    AnyRegValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;

inline constexpr PauseChanged::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : changed_{},
        address_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PauseChanged::PauseChanged(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PauseChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseChangedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseChangedDefaultTypeInternal() {}
  union {
    PauseChanged _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;

inline constexpr DbgBreakpoints::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : list_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DbgBreakpoints::DbgBreakpoints(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DbgBreakpointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointsDefaultTypeInternal() {}
  union {
    DbgBreakpoints _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;

inline constexpr Changed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : changed_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Changed::Changed(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangedDefaultTypeInternal() {}
  union {
    Changed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangedDefaultTypeInternal _Changed_default_instance_;
}  // namespace idadebug
namespace idadebug {
PROTOBUF_CONSTINIT const uint32_t GpRegsEnum_internal_data_[] = {
    589824u, 32u, 699050u, };
bool GpRegsEnum_IsValid(int value) {
  return 0 <= value && value <= 28 && ((357914111u >> value) & 1) != 0;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    GpRegsEnum_strings[19] = {};

static const char GpRegsEnum_names[] = {
    "A0"
    "A1"
    "A2"
    "A3"
    "A4"
    "A5"
    "A6"
    "A7"
    "D0"
    "D1"
    "D2"
    "D3"
    "D4"
    "D5"
    "D6"
    "D7"
    "PC"
    "SP"
    "SR"
};

static const ::google::protobuf::internal::EnumEntry GpRegsEnum_entries[] =
    {
        {{&GpRegsEnum_names[0], 2}, 8},
        {{&GpRegsEnum_names[2], 2}, 10},
        {{&GpRegsEnum_names[4], 2}, 12},
        {{&GpRegsEnum_names[6], 2}, 14},
        {{&GpRegsEnum_names[8], 2}, 16},
        {{&GpRegsEnum_names[10], 2}, 18},
        {{&GpRegsEnum_names[12], 2}, 20},
        {{&GpRegsEnum_names[14], 2}, 22},
        {{&GpRegsEnum_names[16], 2}, 0},
        {{&GpRegsEnum_names[18], 2}, 1},
        {{&GpRegsEnum_names[20], 2}, 2},
        {{&GpRegsEnum_names[22], 2}, 3},
        {{&GpRegsEnum_names[24], 2}, 4},
        {{&GpRegsEnum_names[26], 2}, 5},
        {{&GpRegsEnum_names[28], 2}, 6},
        {{&GpRegsEnum_names[30], 2}, 7},
        {{&GpRegsEnum_names[32], 2}, 24},
        {{&GpRegsEnum_names[34], 2}, 26},
        {{&GpRegsEnum_names[36], 2}, 28},
};

static const int GpRegsEnum_entries_by_number[] = {
    8,  // 0 -> D0
    9,  // 1 -> D1
    10,  // 2 -> D2
    11,  // 3 -> D3
    12,  // 4 -> D4
    13,  // 5 -> D5
    14,  // 6 -> D6
    15,  // 7 -> D7
    0,  // 8 -> A0
    1,  // 10 -> A1
    2,  // 12 -> A2
    3,  // 14 -> A3
    4,  // 16 -> A4
    5,  // 18 -> A5
    6,  // 20 -> A6
    7,  // 22 -> A7
    16,  // 24 -> PC
    17,  // 26 -> SP
    18,  // 28 -> SR
};

const std::string& GpRegsEnum_Name(GpRegsEnum value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          GpRegsEnum_entries, GpRegsEnum_entries_by_number,
          19, GpRegsEnum_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      GpRegsEnum_entries, GpRegsEnum_entries_by_number, 19,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : GpRegsEnum_strings[idx].get();
}

bool GpRegsEnum_Parse(absl::string_view name, GpRegsEnum* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      GpRegsEnum_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<GpRegsEnum>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t VdpRegsEnum_internal_data_[] = {
    1572864u, 0u, };
bool VdpRegsEnum_IsValid(int value) {
  return 0 <= value && value <= 23;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    VdpRegsEnum_strings[24] = {};

static const char VdpRegsEnum_names[] = {
    "V00"
    "V01"
    "V02"
    "V03"
    "V04"
    "V05"
    "V06"
    "V07"
    "V08"
    "V09"
    "V0A"
    "V0B"
    "V0C"
    "V0D"
    "V0E"
    "V0F"
    "V10"
    "V11"
    "V12"
    "V13"
    "V14"
    "V15"
    "V16"
    "V17"
};

static const ::google::protobuf::internal::EnumEntry VdpRegsEnum_entries[] =
    {
        {{&VdpRegsEnum_names[0], 3}, 0},
        {{&VdpRegsEnum_names[3], 3}, 1},
        {{&VdpRegsEnum_names[6], 3}, 2},
        {{&VdpRegsEnum_names[9], 3}, 3},
        {{&VdpRegsEnum_names[12], 3}, 4},
        {{&VdpRegsEnum_names[15], 3}, 5},
        {{&VdpRegsEnum_names[18], 3}, 6},
        {{&VdpRegsEnum_names[21], 3}, 7},
        {{&VdpRegsEnum_names[24], 3}, 8},
        {{&VdpRegsEnum_names[27], 3}, 9},
        {{&VdpRegsEnum_names[30], 3}, 10},
        {{&VdpRegsEnum_names[33], 3}, 11},
        {{&VdpRegsEnum_names[36], 3}, 12},
        {{&VdpRegsEnum_names[39], 3}, 13},
        {{&VdpRegsEnum_names[42], 3}, 14},
        {{&VdpRegsEnum_names[45], 3}, 15},
        {{&VdpRegsEnum_names[48], 3}, 16},
        {{&VdpRegsEnum_names[51], 3}, 17},
        {{&VdpRegsEnum_names[54], 3}, 18},
        {{&VdpRegsEnum_names[57], 3}, 19},
        {{&VdpRegsEnum_names[60], 3}, 20},
        {{&VdpRegsEnum_names[63], 3}, 21},
        {{&VdpRegsEnum_names[66], 3}, 22},
        {{&VdpRegsEnum_names[69], 3}, 23},
};

static const int VdpRegsEnum_entries_by_number[] = {
    0,  // 0 -> V00
    1,  // 1 -> V01
    2,  // 2 -> V02
    3,  // 3 -> V03
    4,  // 4 -> V04
    5,  // 5 -> V05
    6,  // 6 -> V06
    7,  // 7 -> V07
    8,  // 8 -> V08
    9,  // 9 -> V09
    10,  // 10 -> V0A
    11,  // 11 -> V0B
    12,  // 12 -> V0C
    13,  // 13 -> V0D
    14,  // 14 -> V0E
    15,  // 15 -> V0F
    16,  // 16 -> V10
    17,  // 17 -> V11
    18,  // 18 -> V12
    19,  // 19 -> V13
    20,  // 20 -> V14
    21,  // 21 -> V15
    22,  // 22 -> V16
    23,  // 23 -> V17
};

const std::string& VdpRegsEnum_Name(VdpRegsEnum value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          VdpRegsEnum_entries, VdpRegsEnum_entries_by_number,
          24, VdpRegsEnum_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      VdpRegsEnum_entries, VdpRegsEnum_entries_by_number, 24,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : VdpRegsEnum_strings[idx].get();
}

bool VdpRegsEnum_Parse(absl::string_view name, VdpRegsEnum* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      VdpRegsEnum_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<VdpRegsEnum>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t BpType_internal_data_[] = {
    262144u, 0u, };
bool BpType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    BpType_strings[4] = {};

static const char BpType_names[] = {
    "BP_PC"
    "BP_READ"
    "BP_WRITE"
    "DUMMY"
};

static const ::google::protobuf::internal::EnumEntry BpType_entries[] =
    {
        {{&BpType_names[0], 5}, 1},
        {{&BpType_names[5], 7}, 2},
        {{&BpType_names[12], 8}, 3},
        {{&BpType_names[20], 5}, 0},
};

static const int BpType_entries_by_number[] = {
    3,  // 0 -> DUMMY
    0,  // 1 -> BP_PC
    1,  // 2 -> BP_READ
    2,  // 3 -> BP_WRITE
};

const std::string& BpType_Name(BpType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          BpType_entries, BpType_entries_by_number,
          4, BpType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      BpType_entries, BpType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : BpType_strings[idx].get();
}

bool BpType_Parse(absl::string_view name, BpType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      BpType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BpType>(int_value);
  }
  return success;
}
// ===================================================================

class GpReg::_Internal {
 public:
};

GpReg::GpReg(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpReg)
}
GpReg::GpReg(
    ::google::protobuf::Arena* arena, const GpReg& from)
    : GpReg(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpReg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpReg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.reg_ = {};
}
GpReg::~GpReg() {
  // @@protoc_insertion_point(destructor:idadebug.GpReg)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GpReg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpReg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GpReg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> GpReg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GpReg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .idadebug.GpRegsEnum reg = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpReg, _impl_.reg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .idadebug.GpRegsEnum reg = 1;
    {PROTOBUF_FIELD_OFFSET(GpReg, _impl_.reg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GpReg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpReg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpReg)
  return target;
}

::size_t GpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpReg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void GpReg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpReg*>(
      &from));
}

void GpReg::MergeFrom(const GpReg& from) {
  GpReg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpReg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpReg::CopyFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpReg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpReg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpReg::InternalSwap(GpReg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

std::string GpReg::GetTypeName() const {
  return "idadebug.GpReg";
}

// ===================================================================

class GpRegs::_Internal {
 public:
};

GpRegs::GpRegs(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegs)
}
GpRegs::GpRegs(
    ::google::protobuf::Arena* arena, const GpRegs& from)
    : GpRegs(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpRegs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpRegs::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, d0_),
           0,
           offsetof(Impl_, sr_) -
               offsetof(Impl_, d0_) +
               sizeof(Impl_::sr_));
}
GpRegs::~GpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegs)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GpRegs::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.d0_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sr_) -
      reinterpret_cast<char*>(&_impl_.d0_)) + sizeof(_impl_.sr_));
  _internal_metadata_.Clear<std::string>();
}

const char* GpRegs::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 0, 0, 2> GpRegs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    19, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GpRegs_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 D0 = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d0_)}},
    // uint32 D1 = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d1_)}},
    // uint32 D2 = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d2_)}},
    // uint32 D3 = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d3_)}},
    // uint32 D4 = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d4_)}},
    // uint32 D5 = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d5_)}},
    // uint32 D6 = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d6_)}},
    // uint32 D7 = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d7_)}},
    // uint32 A0 = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a0_)}},
    // uint32 A1 = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a1_)}},
    // uint32 A2 = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a2_)}},
    // uint32 A3 = 12;
    {::_pbi::TcParser::FastV32S1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a3_)}},
    // uint32 A4 = 13;
    {::_pbi::TcParser::FastV32S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a4_)}},
    // uint32 A5 = 14;
    {::_pbi::TcParser::FastV32S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a5_)}},
    // uint32 A6 = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a6_)}},
    // uint32 A7 = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a7_)}},
    // uint32 PC = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.pc_)}},
    // uint32 SP = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sp_)}},
    // uint32 SR = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sr_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 D0 = 1;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D1 = 2;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D2 = 3;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D3 = 4;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D4 = 5;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D5 = 6;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d5_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D6 = 7;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d6_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 D7 = 8;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d7_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A0 = 9;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A1 = 10;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A2 = 11;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A3 = 12;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a3_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A4 = 13;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a4_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A5 = 14;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a5_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A6 = 15;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a6_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 A7 = 16;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.a7_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 PC = 17;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.pc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 SP = 18;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 SR = 19;
    {PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GpRegs::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_d0(), target);
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_d1(), target);
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_d2(), target);
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_d3(), target);
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_d4(), target);
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_d5(), target);
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_d6(), target);
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_d7(), target);
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_a0(), target);
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_a1(), target);
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_a2(), target);
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_a3(), target);
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_a4(), target);
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_a5(), target);
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_a6(), target);
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_a7(), target);
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_pc(), target);
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_sp(), target);
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_sr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegs)
  return target;
}

::size_t GpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d0());
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d1());
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d2());
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d3());
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d4());
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d5());
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d6());
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d7());
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a0());
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a1());
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a2());
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a3());
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a4());
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a5());
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_a6());
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_a7());
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_pc());
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_sp());
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_sr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void GpRegs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpRegs*>(
      &from));
}

void GpRegs::MergeFrom(const GpRegs& from) {
  GpRegs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_d0() != 0) {
    _this->_internal_set_d0(from._internal_d0());
  }
  if (from._internal_d1() != 0) {
    _this->_internal_set_d1(from._internal_d1());
  }
  if (from._internal_d2() != 0) {
    _this->_internal_set_d2(from._internal_d2());
  }
  if (from._internal_d3() != 0) {
    _this->_internal_set_d3(from._internal_d3());
  }
  if (from._internal_d4() != 0) {
    _this->_internal_set_d4(from._internal_d4());
  }
  if (from._internal_d5() != 0) {
    _this->_internal_set_d5(from._internal_d5());
  }
  if (from._internal_d6() != 0) {
    _this->_internal_set_d6(from._internal_d6());
  }
  if (from._internal_d7() != 0) {
    _this->_internal_set_d7(from._internal_d7());
  }
  if (from._internal_a0() != 0) {
    _this->_internal_set_a0(from._internal_a0());
  }
  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  if (from._internal_a7() != 0) {
    _this->_internal_set_a7(from._internal_a7());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_sr() != 0) {
    _this->_internal_set_sr(from._internal_sr());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpRegs::CopyFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpRegs::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpRegs::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpRegs::InternalSwap(GpRegs* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sr_)
      + sizeof(GpRegs::_impl_.sr_)
      - PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d0_)>(
          reinterpret_cast<char*>(&_impl_.d0_),
          reinterpret_cast<char*>(&other->_impl_.d0_));
}

std::string GpRegs::GetTypeName() const {
  return "idadebug.GpRegs";
}

// ===================================================================

class GpRegValue::_Internal {
 public:
};

GpRegValue::GpRegValue(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegValue)
}
GpRegValue::GpRegValue(
    ::google::protobuf::Arena* arena, const GpRegValue& from)
    : GpRegValue(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpRegValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpRegValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::value_));
}
GpRegValue::~GpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegValue)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GpRegValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<std::string>();
}

const char* GpRegValue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> GpRegValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GpRegValue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 value = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.value_)}},
    // .idadebug.GpRegsEnum index = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .idadebug.GpRegsEnum index = 1;
    {PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GpRegValue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegValue)
  return target;
}

::size_t GpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void GpRegValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpRegValue*>(
      &from));
}

void GpRegValue::MergeFrom(const GpRegValue& from) {
  GpRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpRegValue::CopyFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GpRegValue::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GpRegValue::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GpRegValue::InternalSwap(GpRegValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.value_)
      + sizeof(GpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

std::string GpRegValue::GetTypeName() const {
  return "idadebug.GpRegValue";
}

// ===================================================================

class VdpReg::_Internal {
 public:
};

VdpReg::VdpReg(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpReg)
}
VdpReg::VdpReg(
    ::google::protobuf::Arena* arena, const VdpReg& from)
    : VdpReg(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VdpReg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VdpReg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.reg_ = {};
}
VdpReg::~VdpReg() {
  // @@protoc_insertion_point(destructor:idadebug.VdpReg)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VdpReg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VdpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpReg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* VdpReg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> VdpReg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VdpReg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .idadebug.VdpRegsEnum reg = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VdpReg, _impl_.reg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .idadebug.VdpRegsEnum reg = 1;
    {PROTOBUF_FIELD_OFFSET(VdpReg, _impl_.reg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VdpReg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpReg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpReg)
  return target;
}

::size_t VdpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpReg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VdpReg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpReg*>(
      &from));
}

void VdpReg::MergeFrom(const VdpReg& from) {
  VdpReg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpReg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpReg::CopyFrom(const VdpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VdpReg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VdpReg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VdpReg::InternalSwap(VdpReg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

std::string VdpReg::GetTypeName() const {
  return "idadebug.VdpReg";
}

// ===================================================================

class VdpRegs::_Internal {
 public:
};

VdpRegs::VdpRegs(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegs)
}
VdpRegs::VdpRegs(
    ::google::protobuf::Arena* arena, const VdpRegs& from)
    : VdpRegs(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VdpRegs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VdpRegs::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, v00_),
           0,
           offsetof(Impl_, v17_) -
               offsetof(Impl_, v00_) +
               sizeof(Impl_::v17_));
}
VdpRegs::~VdpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegs)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VdpRegs::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VdpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v00_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.v17_) -
      reinterpret_cast<char*>(&_impl_.v00_)) + sizeof(_impl_.v17_));
  _internal_metadata_.Clear<std::string>();
}

const char* VdpRegs::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 24, 0, 0, 2> VdpRegs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    24, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4278190080,  // skipmap
    offsetof(decltype(_table_), field_entries),
    24,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VdpRegs_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 V00 = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v00_)}},
    // uint32 V01 = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v01_)}},
    // uint32 V02 = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v02_)}},
    // uint32 V03 = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v03_)}},
    // uint32 V04 = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v04_)}},
    // uint32 V05 = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v05_)}},
    // uint32 V06 = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v06_)}},
    // uint32 V07 = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v07_)}},
    // uint32 V08 = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v08_)}},
    // uint32 V09 = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v09_)}},
    // uint32 V0A = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0a_)}},
    // uint32 V0B = 12;
    {::_pbi::TcParser::FastV32S1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0b_)}},
    // uint32 V0C = 13;
    {::_pbi::TcParser::FastV32S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0c_)}},
    // uint32 V0D = 14;
    {::_pbi::TcParser::FastV32S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0d_)}},
    // uint32 V0E = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0e_)}},
    // uint32 V0F = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0f_)}},
    // uint32 V10 = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v10_)}},
    // uint32 V11 = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v11_)}},
    // uint32 V12 = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v12_)}},
    // uint32 V13 = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v13_)}},
    // uint32 V14 = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v14_)}},
    // uint32 V15 = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v15_)}},
    // uint32 V16 = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v16_)}},
    // uint32 V17 = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v17_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 V00 = 1;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v00_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V01 = 2;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v01_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V02 = 3;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v02_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V03 = 4;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v03_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V04 = 5;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v04_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V05 = 6;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v05_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V06 = 7;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v06_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V07 = 8;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v07_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V08 = 9;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v08_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V09 = 10;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v09_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0A = 11;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0a_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0B = 12;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0b_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0C = 13;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0c_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0D = 14;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0d_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0E = 15;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0e_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V0F = 16;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v0f_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V10 = 17;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v10_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V11 = 18;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v11_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V12 = 19;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v12_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V13 = 20;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v13_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V14 = 21;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v14_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V15 = 22;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v15_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V16 = 23;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v16_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 V17 = 24;
    {PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v17_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VdpRegs::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_v00(), target);
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_v01(), target);
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_v02(), target);
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_v03(), target);
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_v04(), target);
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_v05(), target);
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_v06(), target);
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_v07(), target);
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_v08(), target);
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_v09(), target);
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_v0a(), target);
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_v0b(), target);
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_v0c(), target);
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_v0d(), target);
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_v0e(), target);
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_v0f(), target);
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_v10(), target);
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_v11(), target);
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_v12(), target);
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_v13(), target);
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        21, this->_internal_v14(), target);
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        22, this->_internal_v15(), target);
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        23, this->_internal_v16(), target);
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        24, this->_internal_v17(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegs)
  return target;
}

::size_t VdpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v00());
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v01());
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v02());
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v03());
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v04());
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v05());
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v06());
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v07());
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v08());
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v09());
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v0a());
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v0b());
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v0c());
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v0d());
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_v0e());
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v0f());
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v10());
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v11());
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v12());
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v13());
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v14());
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v15());
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v16());
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_v17());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VdpRegs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpRegs*>(
      &from));
}

void VdpRegs::MergeFrom(const VdpRegs& from) {
  VdpRegs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v00() != 0) {
    _this->_internal_set_v00(from._internal_v00());
  }
  if (from._internal_v01() != 0) {
    _this->_internal_set_v01(from._internal_v01());
  }
  if (from._internal_v02() != 0) {
    _this->_internal_set_v02(from._internal_v02());
  }
  if (from._internal_v03() != 0) {
    _this->_internal_set_v03(from._internal_v03());
  }
  if (from._internal_v04() != 0) {
    _this->_internal_set_v04(from._internal_v04());
  }
  if (from._internal_v05() != 0) {
    _this->_internal_set_v05(from._internal_v05());
  }
  if (from._internal_v06() != 0) {
    _this->_internal_set_v06(from._internal_v06());
  }
  if (from._internal_v07() != 0) {
    _this->_internal_set_v07(from._internal_v07());
  }
  if (from._internal_v08() != 0) {
    _this->_internal_set_v08(from._internal_v08());
  }
  if (from._internal_v09() != 0) {
    _this->_internal_set_v09(from._internal_v09());
  }
  if (from._internal_v0a() != 0) {
    _this->_internal_set_v0a(from._internal_v0a());
  }
  if (from._internal_v0b() != 0) {
    _this->_internal_set_v0b(from._internal_v0b());
  }
  if (from._internal_v0c() != 0) {
    _this->_internal_set_v0c(from._internal_v0c());
  }
  if (from._internal_v0d() != 0) {
    _this->_internal_set_v0d(from._internal_v0d());
  }
  if (from._internal_v0e() != 0) {
    _this->_internal_set_v0e(from._internal_v0e());
  }
  if (from._internal_v0f() != 0) {
    _this->_internal_set_v0f(from._internal_v0f());
  }
  if (from._internal_v10() != 0) {
    _this->_internal_set_v10(from._internal_v10());
  }
  if (from._internal_v11() != 0) {
    _this->_internal_set_v11(from._internal_v11());
  }
  if (from._internal_v12() != 0) {
    _this->_internal_set_v12(from._internal_v12());
  }
  if (from._internal_v13() != 0) {
    _this->_internal_set_v13(from._internal_v13());
  }
  if (from._internal_v14() != 0) {
    _this->_internal_set_v14(from._internal_v14());
  }
  if (from._internal_v15() != 0) {
    _this->_internal_set_v15(from._internal_v15());
  }
  if (from._internal_v16() != 0) {
    _this->_internal_set_v16(from._internal_v16());
  }
  if (from._internal_v17() != 0) {
    _this->_internal_set_v17(from._internal_v17());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpRegs::CopyFrom(const VdpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VdpRegs::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VdpRegs::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VdpRegs::InternalSwap(VdpRegs* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v17_)
      + sizeof(VdpRegs::_impl_.v17_)
      - PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v00_)>(
          reinterpret_cast<char*>(&_impl_.v00_),
          reinterpret_cast<char*>(&other->_impl_.v00_));
}

std::string VdpRegs::GetTypeName() const {
  return "idadebug.VdpRegs";
}

// ===================================================================

class VdpRegValue::_Internal {
 public:
};

VdpRegValue::VdpRegValue(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegValue)
}
VdpRegValue::VdpRegValue(
    ::google::protobuf::Arena* arena, const VdpRegValue& from)
    : VdpRegValue(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VdpRegValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VdpRegValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::value_));
}
VdpRegValue::~VdpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegValue)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void VdpRegValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VdpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<std::string>();
}

const char* VdpRegValue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VdpRegValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VdpRegValue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 value = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.value_)}},
    // .idadebug.VdpRegsEnum index = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .idadebug.VdpRegsEnum index = 1;
    {PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 value = 2;
    {PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VdpRegValue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegValue)
  return target;
}

::size_t VdpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void VdpRegValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpRegValue*>(
      &from));
}

void VdpRegValue::MergeFrom(const VdpRegValue& from) {
  VdpRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpRegValue::CopyFrom(const VdpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VdpRegValue::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VdpRegValue::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VdpRegValue::InternalSwap(VdpRegValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.value_)
      + sizeof(VdpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

std::string VdpRegValue::GetTypeName() const {
  return "idadebug.VdpRegValue";
}

// ===================================================================

class DmaInfo::_Internal {
 public:
};

DmaInfo::DmaInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DmaInfo)
}
DmaInfo::DmaInfo(
    ::google::protobuf::Arena* arena, const DmaInfo& from)
    : DmaInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DmaInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DmaInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, len_),
           0,
           offsetof(Impl_, dst_) -
               offsetof(Impl_, len_) +
               sizeof(Impl_::dst_));
}
DmaInfo::~DmaInfo() {
  // @@protoc_insertion_point(destructor:idadebug.DmaInfo)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DmaInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DmaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DmaInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.len_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dst_) -
      reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.dst_));
  _internal_metadata_.Clear<std::string>();
}

const char* DmaInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> DmaInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DmaInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 len = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.len_)}},
    // uint32 src = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.src_)}},
    // uint32 dst = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.dst_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 len = 1;
    {PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.len_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 src = 2;
    {PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.src_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 dst = 3;
    {PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.dst_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DmaInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DmaInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_len(), target);
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_src(), target);
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DmaInfo)
  return target;
}

::size_t DmaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DmaInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_len());
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_src());
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_dst());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DmaInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DmaInfo*>(
      &from));
}

void DmaInfo::MergeFrom(const DmaInfo& from) {
  DmaInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DmaInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_len() != 0) {
    _this->_internal_set_len(from._internal_len());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_dst() != 0) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DmaInfo::CopyFrom(const DmaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DmaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DmaInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DmaInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DmaInfo::InternalSwap(DmaInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.dst_)
      + sizeof(DmaInfo::_impl_.dst_)
      - PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.len_)>(
          reinterpret_cast<char*>(&_impl_.len_),
          reinterpret_cast<char*>(&other->_impl_.len_));
}

std::string DmaInfo::GetTypeName() const {
  return "idadebug.DmaInfo";
}

// ===================================================================

class MemoryAS::_Internal {
 public:
};

MemoryAS::MemoryAS(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAS)
}
MemoryAS::MemoryAS(
    ::google::protobuf::Arena* arena, const MemoryAS& from)
    : MemoryAS(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MemoryAS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MemoryAS::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, address_),
           0,
           offsetof(Impl_, size_) -
               offsetof(Impl_, address_) +
               sizeof(Impl_::size_));
}
MemoryAS::~MemoryAS() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAS)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void MemoryAS::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MemoryAS::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAS)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryAS::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> MemoryAS::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemoryAS_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 size = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.size_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 size = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MemoryAS::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAS)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAS)
  return target;
}

::size_t MemoryAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void MemoryAS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryAS*>(
      &from));
}

void MemoryAS::MergeFrom(const MemoryAS& from) {
  MemoryAS* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryAS::CopyFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MemoryAS::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MemoryAS::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MemoryAS::InternalSwap(MemoryAS* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.size_)
      + sizeof(MemoryAS::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

std::string MemoryAS::GetTypeName() const {
  return "idadebug.MemoryAS";
}

// ===================================================================

class MemoryAD::_Internal {
 public:
};

MemoryAD::MemoryAD(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAD)
}
inline PROTOBUF_NDEBUG_INLINE MemoryAD::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : data_(arena, from.data_),
        _cached_size_{0} {}

MemoryAD::MemoryAD(
    ::google::protobuf::Arena* arena,
    const MemoryAD& from)
    : ::google::protobuf::MessageLite(arena) {
  MemoryAD* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.address_ = from._impl_.address_;

  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAD)
}
inline PROTOBUF_NDEBUG_INLINE MemoryAD::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_(arena),
        _cached_size_{0} {}

inline void MemoryAD::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.address_ = {};
}
MemoryAD::~MemoryAD() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAD)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void MemoryAD::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MemoryAD::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAD)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryAD::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> MemoryAD::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemoryAD_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryAD, _impl_.data_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryAD, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(MemoryAD, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(MemoryAD, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MemoryAD::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAD)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAD)
  return target;
}

::size_t MemoryAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAD)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void MemoryAD::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryAD*>(
      &from));
}

void MemoryAD::MergeFrom(const MemoryAD& from) {
  MemoryAD* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAD)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryAD::CopyFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MemoryAD::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MemoryAD::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MemoryAD::InternalSwap(MemoryAD* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
        swap(_impl_.address_, other->_impl_.address_);
}

std::string MemoryAD::GetTypeName() const {
  return "idadebug.MemoryAD";
}

// ===================================================================

class DbgBreakpoint::_Internal {
 public:
};

DbgBreakpoint::DbgBreakpoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoint)
}
inline PROTOBUF_NDEBUG_INLINE DbgBreakpoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : condition_(arena, from.condition_),
        _cached_size_{0} {}

DbgBreakpoint::DbgBreakpoint(
    ::google::protobuf::Arena* arena,
    const DbgBreakpoint& from)
    : ::google::protobuf::MessageLite(arena) {
  DbgBreakpoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, elang_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::elang_));

  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoint)
}
inline PROTOBUF_NDEBUG_INLINE DbgBreakpoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : condition_(arena),
        _cached_size_{0} {}

inline void DbgBreakpoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, elang_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::elang_));
}
DbgBreakpoint::~DbgBreakpoint() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoint)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DbgBreakpoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.condition_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DbgBreakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoint)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.elang_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.elang_));
  _internal_metadata_.Clear<std::string>();
}

const char* DbgBreakpoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 40, 2> DbgBreakpoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DbgBreakpoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .idadebug.BpType type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.type_)}},
    // uint32 bstart = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.bstart_)}},
    // uint32 bend = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.bend_)}},
    // bool enabled = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.enabled_)}},
    // bool is_vdp = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.is_vdp_)}},
    // uint32 elang = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.elang_)}},
    // string condition = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.condition_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .idadebug.BpType type = 1;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 bstart = 2;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.bstart_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 bend = 3;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.bend_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool enabled = 4;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_vdp = 5;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.is_vdp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 elang = 6;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.elang_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string condition = 7;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.condition_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\0\0\0\0\11"
    "idadebug.DbgBreakpoint"
    "condition"
  }},
};

::uint8_t* DbgBreakpoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_bstart(), target);
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_bend(), target);
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_enabled(), target);
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_vdp(), target);
  }

  // uint32 elang = 6;
  if (this->_internal_elang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_elang(), target);
  }

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    const std::string& _s = this->_internal_condition();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "idadebug.DbgBreakpoint.condition");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoint)
  return target;
}

::size_t DbgBreakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_condition());
  }

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bstart());
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bend());
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    total_size += 2;
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    total_size += 2;
  }

  // uint32 elang = 6;
  if (this->_internal_elang() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_elang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DbgBreakpoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DbgBreakpoint*>(
      &from));
}

void DbgBreakpoint::MergeFrom(const DbgBreakpoint& from) {
  DbgBreakpoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_condition().empty()) {
    _this->_internal_set_condition(from._internal_condition());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bstart() != 0) {
    _this->_internal_set_bstart(from._internal_bstart());
  }
  if (from._internal_bend() != 0) {
    _this->_internal_set_bend(from._internal_bend());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_is_vdp() != 0) {
    _this->_internal_set_is_vdp(from._internal_is_vdp());
  }
  if (from._internal_elang() != 0) {
    _this->_internal_set_elang(from._internal_elang());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DbgBreakpoint::CopyFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DbgBreakpoint::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DbgBreakpoint::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DbgBreakpoint::InternalSwap(DbgBreakpoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.condition_, &other->_impl_.condition_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.elang_)
      + sizeof(DbgBreakpoint::_impl_.elang_)
      - PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string DbgBreakpoint::GetTypeName() const {
  return "idadebug.DbgBreakpoint";
}

// ===================================================================

class DbgBreakpoints::_Internal {
 public:
};

DbgBreakpoints::DbgBreakpoints(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoints)
}
inline PROTOBUF_NDEBUG_INLINE DbgBreakpoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : list_{visibility, arena, from.list_},
        _cached_size_{0} {}

DbgBreakpoints::DbgBreakpoints(
    ::google::protobuf::Arena* arena,
    const DbgBreakpoints& from)
    : ::google::protobuf::MessageLite(arena) {
  DbgBreakpoints* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoints)
}
inline PROTOBUF_NDEBUG_INLINE DbgBreakpoints::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : list_{visibility, arena},
        _cached_size_{0} {}

inline void DbgBreakpoints::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DbgBreakpoints::~DbgBreakpoints() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoints)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void DbgBreakpoints::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DbgBreakpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DbgBreakpoints::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DbgBreakpoints::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DbgBreakpoints_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .idadebug.DbgBreakpoint list = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DbgBreakpoints, _impl_.list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .idadebug.DbgBreakpoint list = 1;
    {PROTOBUF_FIELD_OFFSET(DbgBreakpoints, _impl_.list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::idadebug::DbgBreakpoint>()},
  }}, {{
  }},
};

::uint8_t* DbgBreakpoints::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoints)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoints)
  return target;
}

::size_t DbgBreakpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoints)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_internal_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void DbgBreakpoints::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DbgBreakpoints*>(
      &from));
}

void DbgBreakpoints::MergeFrom(const DbgBreakpoints& from) {
  DbgBreakpoints* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoints)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_list()->MergeFrom(
      from._internal_list());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DbgBreakpoints::CopyFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DbgBreakpoints::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DbgBreakpoints::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DbgBreakpoints::InternalSwap(DbgBreakpoints* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

std::string DbgBreakpoints::GetTypeName() const {
  return "idadebug.DbgBreakpoints";
}

// ===================================================================

class Callstack::_Internal {
 public:
};

Callstack::Callstack(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Callstack)
}
inline PROTOBUF_NDEBUG_INLINE Callstack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : callstack_{visibility, arena, from.callstack_},
        _callstack_cached_byte_size_{0},
        _cached_size_{0} {}

Callstack::Callstack(
    ::google::protobuf::Arena* arena,
    const Callstack& from)
    : ::google::protobuf::MessageLite(arena) {
  Callstack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:idadebug.Callstack)
}
inline PROTOBUF_NDEBUG_INLINE Callstack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : callstack_{visibility, arena},
        _callstack_cached_byte_size_{0},
        _cached_size_{0} {}

inline void Callstack::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:idadebug.Callstack)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Callstack::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Callstack)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.callstack_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Callstack::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Callstack::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Callstack_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated uint32 callstack = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Callstack, _impl_.callstack_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint32 callstack = 1;
    {PROTOBUF_FIELD_OFFSET(Callstack, _impl_.callstack_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Callstack::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Callstack)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    int byte_size = _impl_._callstack_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_callstack(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Callstack)
  return target;
}

::size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Callstack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_callstack())
    ;
    _impl_._callstack_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Callstack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Callstack*>(
      &from));
}

void Callstack::MergeFrom(const Callstack& from) {
  Callstack* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Callstack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_callstack()->MergeFrom(from._internal_callstack());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Callstack::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Callstack::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Callstack::InternalSwap(Callstack* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.callstack_.InternalSwap(&other->_impl_.callstack_);
}

std::string Callstack::GetTypeName() const {
  return "idadebug.Callstack";
}

// ===================================================================

class AnyRegValue::_Internal {
 public:
};

AnyRegValue::AnyRegValue(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.AnyRegValue)
}
AnyRegValue::AnyRegValue(
    ::google::protobuf::Arena* arena, const AnyRegValue& from)
    : AnyRegValue(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AnyRegValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AnyRegValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
AnyRegValue::~AnyRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.AnyRegValue)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AnyRegValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AnyRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.AnyRegValue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* AnyRegValue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AnyRegValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AnyRegValue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AnyRegValue, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(AnyRegValue, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AnyRegValue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.AnyRegValue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.AnyRegValue)
  return target;
}

::size_t AnyRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.AnyRegValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AnyRegValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AnyRegValue*>(
      &from));
}

void AnyRegValue::MergeFrom(const AnyRegValue& from) {
  AnyRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.AnyRegValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AnyRegValue::CopyFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnyRegValue::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AnyRegValue::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AnyRegValue::InternalSwap(AnyRegValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

std::string AnyRegValue::GetTypeName() const {
  return "idadebug.AnyRegValue";
}

// ===================================================================

class MemData::_Internal {
 public:
};

MemData::MemData(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemData)
}
inline PROTOBUF_NDEBUG_INLINE MemData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : data_(arena, from.data_),
        _cached_size_{0} {}

MemData::MemData(
    ::google::protobuf::Arena* arena,
    const MemData& from)
    : ::google::protobuf::MessageLite(arena) {
  MemData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:idadebug.MemData)
}
inline PROTOBUF_NDEBUG_INLINE MemData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_(arena),
        _cached_size_{0} {}

inline void MemData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MemData::~MemData() {
  // @@protoc_insertion_point(destructor:idadebug.MemData)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void MemData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* MemData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MemData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // bytes data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MemData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes data = 1;
    {PROTOBUF_FIELD_OFFSET(MemData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MemData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemData)
  return target;
}

::size_t MemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void MemData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemData*>(
      &from));
}

void MemData::MergeFrom(const MemData& from) {
  MemData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemData::CopyFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MemData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MemData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MemData::InternalSwap(MemData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
}

std::string MemData::GetTypeName() const {
  return "idadebug.MemData";
}

// ===================================================================

// ===================================================================

class PauseChanged::_Internal {
 public:
};

PauseChanged::PauseChanged(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.PauseChanged)
}
inline PROTOBUF_NDEBUG_INLINE PauseChanged::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : changed_{visibility, arena, from.changed_},
        _cached_size_{0} {}

PauseChanged::PauseChanged(
    ::google::protobuf::Arena* arena,
    const PauseChanged& from)
    : ::google::protobuf::MessageLite(arena) {
  PauseChanged* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.address_ = from._impl_.address_;

  // @@protoc_insertion_point(copy_constructor:idadebug.PauseChanged)
}
inline PROTOBUF_NDEBUG_INLINE PauseChanged::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : changed_{visibility, arena},
        _cached_size_{0} {}

inline void PauseChanged::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.address_ = {};
}
PauseChanged::~PauseChanged() {
  // @@protoc_insertion_point(destructor:idadebug.PauseChanged)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void PauseChanged::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PauseChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.PauseChanged)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* PauseChanged::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 0, 2> PauseChanged::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PauseChanged_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint32 address = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PauseChanged, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(PauseChanged, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // map<uint32, uint32> changed = 2;
    {PROTOBUF_FIELD_OFFSET(PauseChanged, _impl_.changed_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PauseChanged()._impl_.changed_)>(
        1, 0, 0, 13,
        13)},
  }}, {{
  }},
};

::uint8_t* PauseChanged::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.PauseChanged)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // map<uint32, uint32> changed = 2;
  if (!_internal_changed().empty()) {
    using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_UINT32>;
    const auto& field = _internal_changed();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.PauseChanged)
  return target;
}

::size_t PauseChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.PauseChanged)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_changed_size());
  for (const auto& entry : _internal_changed()) {
    total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_UINT32>::ByteSizeLong(entry.first, entry.second);
  }
  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void PauseChanged::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PauseChanged*>(
      &from));
}

void PauseChanged::MergeFrom(const PauseChanged& from) {
  PauseChanged* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.PauseChanged)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PauseChanged::CopyFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PauseChanged::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PauseChanged::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PauseChanged::InternalSwap(PauseChanged* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
        swap(_impl_.address_, other->_impl_.address_);
}

std::string PauseChanged::GetTypeName() const {
  return "idadebug.PauseChanged";
}

// ===================================================================

// ===================================================================

class Changed::_Internal {
 public:
};

Changed::Changed(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Changed)
}
inline PROTOBUF_NDEBUG_INLINE Changed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : changed_{visibility, arena, from.changed_},
        _cached_size_{0} {}

Changed::Changed(
    ::google::protobuf::Arena* arena,
    const Changed& from)
    : ::google::protobuf::MessageLite(arena) {
  Changed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:idadebug.Changed)
}
inline PROTOBUF_NDEBUG_INLINE Changed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : changed_{visibility, arena},
        _cached_size_{0} {}

inline void Changed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Changed::~Changed() {
  // @@protoc_insertion_point(destructor:idadebug.Changed)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Changed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Changed::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Changed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Changed::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Changed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Changed_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<uint32, uint32> changed = 1;
    {PROTOBUF_FIELD_OFFSET(Changed, _impl_.changed_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Changed()._impl_.changed_)>(
        1, 0, 0, 13,
        13)},
  }}, {{
  }},
};

::uint8_t* Changed::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Changed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<uint32, uint32> changed = 1;
  if (!_internal_changed().empty()) {
    using MapType = ::google::protobuf::Map<::uint32_t, ::uint32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_UINT32>;
    const auto& field = _internal_changed();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Changed)
  return target;
}

::size_t Changed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Changed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_changed_size());
  for (const auto& entry : _internal_changed()) {
    total_size += _pbi::MapEntryFuncs<::uint32_t, ::uint32_t,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_UINT32>::ByteSizeLong(entry.first, entry.second);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Changed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Changed*>(
      &from));
}

void Changed::MergeFrom(const Changed& from) {
  Changed* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Changed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Changed::CopyFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Changed::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Changed::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Changed::InternalSwap(Changed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
}

std::string Changed::GetTypeName() const {
  return "idadebug.Changed";
}

// ===================================================================

class Condition::_Internal {
 public:
};

Condition::Condition(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Condition)
}
inline PROTOBUF_NDEBUG_INLINE Condition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : condition_(arena, from.condition_),
        _cached_size_{0} {}

Condition::Condition(
    ::google::protobuf::Arena* arena,
    const Condition& from)
    : ::google::protobuf::MessageLite(arena) {
  Condition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.elang_ = from._impl_.elang_;

  // @@protoc_insertion_point(copy_constructor:idadebug.Condition)
}
inline PROTOBUF_NDEBUG_INLINE Condition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : condition_(arena),
        _cached_size_{0} {}

inline void Condition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.elang_ = {};
}
Condition::~Condition() {
  // @@protoc_insertion_point(destructor:idadebug.Condition)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Condition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.condition_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Condition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.ClearToEmpty();
  _impl_.elang_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* Condition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 36, 2> Condition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Condition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // string condition = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Condition, _impl_.condition_)}},
    // uint32 elang = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Condition, _impl_.elang_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 elang = 1;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.elang_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string condition = 2;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.condition_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\11\0\0\0\0\0"
    "idadebug.Condition"
    "condition"
  }},
};

::uint8_t* Condition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Condition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 elang = 1;
  if (this->_internal_elang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_elang(), target);
  }

  // string condition = 2;
  if (!this->_internal_condition().empty()) {
    const std::string& _s = this->_internal_condition();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "idadebug.Condition.condition");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Condition)
  return target;
}

::size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Condition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string condition = 2;
  if (!this->_internal_condition().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_condition());
  }

  // uint32 elang = 1;
  if (this->_internal_elang() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_elang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Condition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Condition*>(
      &from));
}

void Condition::MergeFrom(const Condition& from) {
  Condition* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Condition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_condition().empty()) {
    _this->_internal_set_condition(from._internal_condition());
  }
  if (from._internal_elang() != 0) {
    _this->_internal_set_elang(from._internal_elang());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Condition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Condition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Condition::InternalSwap(Condition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.condition_, &other->_impl_.condition_, arena);
        swap(_impl_.elang_, other->_impl_.elang_);
}

std::string Condition::GetTypeName() const {
  return "idadebug.Condition";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idadebug
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
