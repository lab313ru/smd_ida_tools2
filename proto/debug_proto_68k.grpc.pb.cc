// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: debug_proto_68k.proto

#include "debug_proto_68k.pb.h"
#include "debug_proto_68k.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace idadebug {

static const char* DbgServer_method_names[] = {
  "/idadebug.DbgServer/get_gp_reg",
  "/idadebug.DbgServer/get_gp_regs",
  "/idadebug.DbgServer/set_gp_reg",
  "/idadebug.DbgServer/get_vdp_reg",
  "/idadebug.DbgServer/get_vdp_regs",
  "/idadebug.DbgServer/set_vdp_reg",
  "/idadebug.DbgServer/get_dma_info",
  "/idadebug.DbgServer/read_memory",
  "/idadebug.DbgServer/write_memory",
  "/idadebug.DbgServer/get_breakpoints",
  "/idadebug.DbgServer/add_breakpoint",
  "/idadebug.DbgServer/toggle_breakpoint",
  "/idadebug.DbgServer/update_breakpoint",
  "/idadebug.DbgServer/del_breakpoint",
  "/idadebug.DbgServer/clear_breakpoints",
  "/idadebug.DbgServer/pause",
  "/idadebug.DbgServer/resume",
  "/idadebug.DbgServer/start_emulation",
  "/idadebug.DbgServer/exit_emulation",
  "/idadebug.DbgServer/step_into",
  "/idadebug.DbgServer/step_over",
  "/idadebug.DbgServer/get_callstack",
};

std::unique_ptr< DbgServer::Stub> DbgServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DbgServer::Stub> stub(new DbgServer::Stub(channel, options));
  return stub;
}

DbgServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_gp_reg_(DbgServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_gp_regs_(DbgServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_gp_reg_(DbgServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_vdp_reg_(DbgServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_vdp_regs_(DbgServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_vdp_reg_(DbgServer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_dma_info_(DbgServer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_memory_(DbgServer_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_memory_(DbgServer_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_breakpoints_(DbgServer_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_breakpoint_(DbgServer_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_toggle_breakpoint_(DbgServer_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_breakpoint_(DbgServer_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_del_breakpoint_(DbgServer_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_breakpoints_(DbgServer_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pause_(DbgServer_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resume_(DbgServer_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_emulation_(DbgServer_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exit_emulation_(DbgServer_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_step_into_(DbgServer_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_step_over_(DbgServer_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_callstack_(DbgServer_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DbgServer::Stub::get_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpReg& request, ::idadebug::AnyRegValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::GpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_gp_reg_, context, request, response);
}

void DbgServer::Stub::async::get_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpReg* request, ::idadebug::AnyRegValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::GpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_gp_reg_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpReg* request, ::idadebug::AnyRegValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_gp_reg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::AnyRegValue>* DbgServer::Stub::PrepareAsyncget_gp_regRaw(::grpc::ClientContext* context, const ::idadebug::GpReg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::AnyRegValue, ::idadebug::GpReg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_gp_reg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::AnyRegValue>* DbgServer::Stub::Asyncget_gp_regRaw(::grpc::ClientContext* context, const ::idadebug::GpReg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_gp_regRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_gp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::idadebug::GpRegs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::idadebug::GpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_gp_regs_, context, request, response);
}

void DbgServer::Stub::async::get_gp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::GpRegs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::idadebug::GpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_gp_regs_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_gp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::GpRegs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_gp_regs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::GpRegs>* DbgServer::Stub::PrepareAsyncget_gp_regsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::GpRegs, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_gp_regs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::GpRegs>* DbgServer::Stub::Asyncget_gp_regsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_gp_regsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::set_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpRegValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::GpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_gp_reg_, context, request, response);
}

void DbgServer::Stub::async::set_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpRegValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::GpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_gp_reg_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::set_gp_reg(::grpc::ClientContext* context, const ::idadebug::GpRegValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_gp_reg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncset_gp_regRaw(::grpc::ClientContext* context, const ::idadebug::GpRegValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::GpRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_gp_reg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncset_gp_regRaw(::grpc::ClientContext* context, const ::idadebug::GpRegValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_gp_regRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpReg& request, ::idadebug::AnyRegValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::VdpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_vdp_reg_, context, request, response);
}

void DbgServer::Stub::async::get_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpReg* request, ::idadebug::AnyRegValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::VdpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_vdp_reg_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpReg* request, ::idadebug::AnyRegValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_vdp_reg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::AnyRegValue>* DbgServer::Stub::PrepareAsyncget_vdp_regRaw(::grpc::ClientContext* context, const ::idadebug::VdpReg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::AnyRegValue, ::idadebug::VdpReg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_vdp_reg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::AnyRegValue>* DbgServer::Stub::Asyncget_vdp_regRaw(::grpc::ClientContext* context, const ::idadebug::VdpReg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_vdp_regRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_vdp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::idadebug::VdpRegs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::idadebug::VdpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_vdp_regs_, context, request, response);
}

void DbgServer::Stub::async::get_vdp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::VdpRegs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::idadebug::VdpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_vdp_regs_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_vdp_regs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::VdpRegs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_vdp_regs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::VdpRegs>* DbgServer::Stub::PrepareAsyncget_vdp_regsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::VdpRegs, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_vdp_regs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::VdpRegs>* DbgServer::Stub::Asyncget_vdp_regsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_vdp_regsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::set_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpRegValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::VdpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_vdp_reg_, context, request, response);
}

void DbgServer::Stub::async::set_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpRegValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::VdpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_vdp_reg_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::set_vdp_reg(::grpc::ClientContext* context, const ::idadebug::VdpRegValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_vdp_reg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncset_vdp_regRaw(::grpc::ClientContext* context, const ::idadebug::VdpRegValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::VdpRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_vdp_reg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncset_vdp_regRaw(::grpc::ClientContext* context, const ::idadebug::VdpRegValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_vdp_regRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_dma_info(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::idadebug::DmaInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::idadebug::DmaInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_dma_info_, context, request, response);
}

void DbgServer::Stub::async::get_dma_info(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::DmaInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::idadebug::DmaInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_dma_info_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_dma_info(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::DmaInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_dma_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::DmaInfo>* DbgServer::Stub::PrepareAsyncget_dma_infoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::DmaInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_dma_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::DmaInfo>* DbgServer::Stub::Asyncget_dma_infoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_dma_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::read_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAS& request, ::idadebug::MemData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::MemoryAS, ::idadebug::MemData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_read_memory_, context, request, response);
}

void DbgServer::Stub::async::read_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAS* request, ::idadebug::MemData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::MemoryAS, ::idadebug::MemData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_memory_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::read_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAS* request, ::idadebug::MemData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_memory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::MemData>* DbgServer::Stub::PrepareAsyncread_memoryRaw(::grpc::ClientContext* context, const ::idadebug::MemoryAS& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::MemData, ::idadebug::MemoryAS, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_read_memory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::MemData>* DbgServer::Stub::Asyncread_memoryRaw(::grpc::ClientContext* context, const ::idadebug::MemoryAS& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncread_memoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::write_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAD& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::MemoryAD, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_write_memory_, context, request, response);
}

void DbgServer::Stub::async::write_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAD* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::MemoryAD, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_memory_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::write_memory(::grpc::ClientContext* context, const ::idadebug::MemoryAD* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_memory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncwrite_memoryRaw(::grpc::ClientContext* context, const ::idadebug::MemoryAD& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::MemoryAD, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_write_memory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncwrite_memoryRaw(::grpc::ClientContext* context, const ::idadebug::MemoryAD& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwrite_memoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::idadebug::DbgBreakpoints* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::idadebug::DbgBreakpoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_breakpoints_, context, request, response);
}

void DbgServer::Stub::async::get_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::DbgBreakpoints* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::idadebug::DbgBreakpoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_breakpoints_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::DbgBreakpoints* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_breakpoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::DbgBreakpoints>* DbgServer::Stub::PrepareAsyncget_breakpointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::DbgBreakpoints, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_breakpoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::DbgBreakpoints>* DbgServer::Stub::Asyncget_breakpointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_breakpointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::add_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_breakpoint_, context, request, response);
}

void DbgServer::Stub::async::add_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_breakpoint_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::add_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncadd_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::DbgBreakpoint, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncadd_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncadd_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::toggle_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_toggle_breakpoint_, context, request, response);
}

void DbgServer::Stub::async::toggle_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toggle_breakpoint_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::toggle_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toggle_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsynctoggle_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::DbgBreakpoint, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_toggle_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asynctoggle_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctoggle_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::update_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_update_breakpoint_, context, request, response);
}

void DbgServer::Stub::async::update_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_breakpoint_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::update_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncupdate_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::DbgBreakpoint, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_update_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncupdate_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdate_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::del_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_del_breakpoint_, context, request, response);
}

void DbgServer::Stub::async::del_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_del_breakpoint_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::del_breakpoint(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_del_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncdel_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::DbgBreakpoint, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_del_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncdel_breakpointRaw(::grpc::ClientContext* context, const ::idadebug::DbgBreakpoint& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdel_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::clear_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_breakpoints_, context, request, response);
}

void DbgServer::Stub::async::clear_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_breakpoints_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::clear_breakpoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_breakpoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncclear_breakpointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_breakpoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncclear_breakpointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclear_breakpointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::pause(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pause_, context, request, response);
}

void DbgServer::Stub::async::pause(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::pause(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncpauseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::AsyncpauseRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::resume(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resume_, context, request, response);
}

void DbgServer::Stub::async::resume(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resume_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::resume(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncresumeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::AsyncresumeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::start_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_emulation_, context, request, response);
}

void DbgServer::Stub::async::start_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_emulation_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::start_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_emulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncstart_emulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_emulation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncstart_emulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_emulationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::exit_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exit_emulation_, context, request, response);
}

void DbgServer::Stub::async::exit_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exit_emulation_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::exit_emulation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exit_emulation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncexit_emulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exit_emulation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncexit_emulationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexit_emulationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::step_into(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_step_into_, context, request, response);
}

void DbgServer::Stub::async::step_into(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_into_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::step_into(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_into_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncstep_intoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_step_into_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncstep_intoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstep_intoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::step_over(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_step_over_, context, request, response);
}

void DbgServer::Stub::async::step_over(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_over_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::step_over(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_step_over_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::PrepareAsyncstep_overRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_step_over_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgServer::Stub::Asyncstep_overRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstep_overRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgServer::Stub::get_callstack(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::idadebug::Callstack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::idadebug::Callstack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_callstack_, context, request, response);
}

void DbgServer::Stub::async::get_callstack(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::Callstack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::idadebug::Callstack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_callstack_, context, request, response, std::move(f));
}

void DbgServer::Stub::async::get_callstack(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::idadebug::Callstack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_callstack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::idadebug::Callstack>* DbgServer::Stub::PrepareAsyncget_callstackRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::idadebug::Callstack, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_callstack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::idadebug::Callstack>* DbgServer::Stub::Asyncget_callstackRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_callstackRaw(context, request, cq);
  result->StartCall();
  return result;
}

DbgServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::GpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::GpReg* req,
             ::idadebug::AnyRegValue* resp) {
               return service->get_gp_reg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::idadebug::GpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::idadebug::GpRegs* resp) {
               return service->get_gp_regs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::GpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::GpRegValue* req,
             ::google::protobuf::Empty* resp) {
               return service->set_gp_reg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::VdpReg, ::idadebug::AnyRegValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::VdpReg* req,
             ::idadebug::AnyRegValue* resp) {
               return service->get_vdp_reg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::idadebug::VdpRegs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::idadebug::VdpRegs* resp) {
               return service->get_vdp_regs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::VdpRegValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::VdpRegValue* req,
             ::google::protobuf::Empty* resp) {
               return service->set_vdp_reg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::idadebug::DmaInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::idadebug::DmaInfo* resp) {
               return service->get_dma_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::MemoryAS, ::idadebug::MemData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::MemoryAS* req,
             ::idadebug::MemData* resp) {
               return service->read_memory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::MemoryAD, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::MemoryAD* req,
             ::google::protobuf::Empty* resp) {
               return service->write_memory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::idadebug::DbgBreakpoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::idadebug::DbgBreakpoints* resp) {
               return service->get_breakpoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::DbgBreakpoint* req,
             ::google::protobuf::Empty* resp) {
               return service->add_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::DbgBreakpoint* req,
             ::google::protobuf::Empty* resp) {
               return service->toggle_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::DbgBreakpoint* req,
             ::google::protobuf::Empty* resp) {
               return service->update_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::idadebug::DbgBreakpoint, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::DbgBreakpoint* req,
             ::google::protobuf::Empty* resp) {
               return service->del_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->clear_breakpoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->resume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->start_emulation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->exit_emulation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->step_into(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->step_over(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgServer_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgServer::Service, ::google::protobuf::Empty, ::idadebug::Callstack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::idadebug::Callstack* resp) {
               return service->get_callstack(ctx, req, resp);
             }, this)));
}

DbgServer::Service::~Service() {
}

::grpc::Status DbgServer::Service::get_gp_reg(::grpc::ServerContext* context, const ::idadebug::GpReg* request, ::idadebug::AnyRegValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_gp_regs(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::idadebug::GpRegs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::set_gp_reg(::grpc::ServerContext* context, const ::idadebug::GpRegValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_vdp_reg(::grpc::ServerContext* context, const ::idadebug::VdpReg* request, ::idadebug::AnyRegValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_vdp_regs(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::idadebug::VdpRegs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::set_vdp_reg(::grpc::ServerContext* context, const ::idadebug::VdpRegValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_dma_info(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::idadebug::DmaInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::read_memory(::grpc::ServerContext* context, const ::idadebug::MemoryAS* request, ::idadebug::MemData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::write_memory(::grpc::ServerContext* context, const ::idadebug::MemoryAD* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_breakpoints(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::idadebug::DbgBreakpoints* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::add_breakpoint(::grpc::ServerContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::toggle_breakpoint(::grpc::ServerContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::update_breakpoint(::grpc::ServerContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::del_breakpoint(::grpc::ServerContext* context, const ::idadebug::DbgBreakpoint* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::clear_breakpoints(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::pause(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::resume(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::start_emulation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::exit_emulation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::step_into(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::step_over(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgServer::Service::get_callstack(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::idadebug::Callstack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DbgClient_method_names[] = {
  "/idadebug.DbgClient/start_event",
  "/idadebug.DbgClient/pause_event",
  "/idadebug.DbgClient/stop_event",
  "/idadebug.DbgClient/eval_condition",
};

std::unique_ptr< DbgClient::Stub> DbgClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DbgClient::Stub> stub(new DbgClient::Stub(channel, options));
  return stub;
}

DbgClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_start_event_(DbgClient_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pause_event_(DbgClient_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_event_(DbgClient_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_eval_condition_(DbgClient_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DbgClient::Stub::start_event(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_event_, context, request, response);
}

void DbgClient::Stub::async::start_event(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_event_, context, request, response, std::move(f));
}

void DbgClient::Stub::async::start_event(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::PrepareAsyncstart_eventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_event_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::Asyncstart_eventRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_eventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgClient::Stub::pause_event(::grpc::ClientContext* context, const ::idadebug::PauseChanged& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::PauseChanged, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pause_event_, context, request, response);
}

void DbgClient::Stub::async::pause_event(::grpc::ClientContext* context, const ::idadebug::PauseChanged* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::PauseChanged, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_event_, context, request, response, std::move(f));
}

void DbgClient::Stub::async::pause_event(::grpc::ClientContext* context, const ::idadebug::PauseChanged* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::PrepareAsyncpause_eventRaw(::grpc::ClientContext* context, const ::idadebug::PauseChanged& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::PauseChanged, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pause_event_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::Asyncpause_eventRaw(::grpc::ClientContext* context, const ::idadebug::PauseChanged& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpause_eventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgClient::Stub::stop_event(::grpc::ClientContext* context, const ::idadebug::Changed& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::Changed, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_event_, context, request, response);
}

void DbgClient::Stub::async::stop_event(::grpc::ClientContext* context, const ::idadebug::Changed* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::Changed, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_event_, context, request, response, std::move(f));
}

void DbgClient::Stub::async::stop_event(::grpc::ClientContext* context, const ::idadebug::Changed* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_event_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::PrepareAsyncstop_eventRaw(::grpc::ClientContext* context, const ::idadebug::Changed& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::idadebug::Changed, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_event_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DbgClient::Stub::Asyncstop_eventRaw(::grpc::ClientContext* context, const ::idadebug::Changed& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstop_eventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DbgClient::Stub::eval_condition(::grpc::ClientContext* context, const ::idadebug::Condition& request, ::google::protobuf::BoolValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::idadebug::Condition, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_eval_condition_, context, request, response);
}

void DbgClient::Stub::async::eval_condition(::grpc::ClientContext* context, const ::idadebug::Condition* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::idadebug::Condition, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_eval_condition_, context, request, response, std::move(f));
}

void DbgClient::Stub::async::eval_condition(::grpc::ClientContext* context, const ::idadebug::Condition* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_eval_condition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* DbgClient::Stub::PrepareAsynceval_conditionRaw(::grpc::ClientContext* context, const ::idadebug::Condition& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::BoolValue, ::idadebug::Condition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_eval_condition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* DbgClient::Stub::Asynceval_conditionRaw(::grpc::ClientContext* context, const ::idadebug::Condition& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynceval_conditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

DbgClient::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgClient_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgClient::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->start_event(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgClient_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgClient::Service, ::idadebug::PauseChanged, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::PauseChanged* req,
             ::google::protobuf::Empty* resp) {
               return service->pause_event(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgClient_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgClient::Service, ::idadebug::Changed, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::Changed* req,
             ::google::protobuf::Empty* resp) {
               return service->stop_event(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DbgClient_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DbgClient::Service, ::idadebug::Condition, ::google::protobuf::BoolValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DbgClient::Service* service,
             ::grpc::ServerContext* ctx,
             const ::idadebug::Condition* req,
             ::google::protobuf::BoolValue* resp) {
               return service->eval_condition(ctx, req, resp);
             }, this)));
}

DbgClient::Service::~Service() {
}

::grpc::Status DbgClient::Service::start_event(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgClient::Service::pause_event(::grpc::ServerContext* context, const ::idadebug::PauseChanged* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgClient::Service::stop_event(::grpc::ServerContext* context, const ::idadebug::Changed* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DbgClient::Service::eval_condition(::grpc::ServerContext* context, const ::idadebug::Condition* request, ::google::protobuf::BoolValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace idadebug

